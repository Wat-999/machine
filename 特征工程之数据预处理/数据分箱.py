#各种贷款业务机构普遍使用信用评分对客户进行评估，相应对模型称为信用评分卡模型。在构建信用评分卡模型对过程中，需要利用WOE和IV值进行特征筛选
#而计算这两个值对第一步就是要进行数据分箱。数据分箱就是将一个连续变量离散化，可分为等宽分箱和等深分箱。等宽分箱是指每个分箱等差值相等，
#以"年龄"这一连续特征变量为例，其取值范围0～100的连续数值，可一将年龄分为0～20，20～40，40～60，60～80，80～100共5个分箱
#这5个分箱就可以当成离散的分类的变量，每个分箱的年龄差相等(都相差20岁）。等深分箱是指每个分箱中等样本数一致，同样按年龄这一特征变量分箱
#例如，500个样本分成5箱，那么每个分箱中都是100人，此时对应对5个分箱中都是100人，此时对应对5个分箱可能就是0～20， 20～25， 25～30，30～50，50～100，确保每个分箱中的人数一样多
#实战中等宽分箱应用相对比较多
import pandas as pd
data = pd.DataFrame([[22, 1], [25, 1], [20, 0], [35, 0], [32, 1], [38, 0], [50, 0], [46, 1]], columns=['年龄', '是否违约'])
data_cut = pd.cut(data['年龄'], 3)    #cut()函数进行等宽分箱，第一个参数待分箱等列，第二个参数是分箱个数
print(data_cut)

#用groupby()函数进行分组，用count()函数进行计数
a = data['年龄'].groupby(data_cut).count()
print(a)
#信用评分卡模型可以依据年龄、月收入、负债比率、历史逾期次数等多个特征变量对客户进行评估。对特征变量年龄进行离散化可以使建立的模型更稳定
#例如，将20～30岁作为一个类别，如果客户从25岁增长为26岁，也不会因此成为完全不同类别的人。但是，年龄位于类别区间边界点的客户则会因为增长一岁
#而被分到另一个类别，因此在分箱时要谨慎选取类别间的界限。数据分箱还有一个好处就是可以剔除异常值的影响，也是异常值处理的一个手段

#特征筛选：WOE值和IV值
#在使用逻辑回归、决策树等模型算法构建分类模型时，经常需要对特征变量进行筛选。因为有时可能会获得100多个候选特征变量，通常不会直接把这些特征变量
#放到模型中去进行拟合训练，而是从这些特征变量中挑选出一些放进模型，构成模变量列表
#挑选入模变量需要考虑很多因素，如变量的预测能力、简单性(容易生成和使用）、可解释性等。其中最主要的衡量标准是变量的预测能力，
#对分类模型来说，即希望变量具有较好对特征区分度，可以准确地将样本进行分类。
#WOE值和IV值就是这样的指标，它们可以用来衡量特征变量的预测能力，或者说特征变量的特征区分度，类似的指标还有基尼系数和信息增益。对于决策树等模型来说
#可以通过基尼系数和信息增益来衡量变量等特征区分度，而对于逻辑回归等没有基尼系数等指标的模型而言，可以同WOE值IV值进行变量的选择。
#IV值的计算是以WOE值为基础的，而要计算一个变量的WOE值，需要先对这个变量进行分箱处理，WOE值与IV值在银行对信贷违约预测中应用较多

#WOE值的定义和计算
#WOE(证据权重），其反映来某一变量的特征区分度。要计算一个变量的woe值，需要先对这个变量进行分箱处理，
#分箱后，第i个分箱内数据的WOE值为WOE(i)=ln(Pyi/Pni) ,其中Pyi=Yi/Yt，Pni=Ni/Nt

#以客户违约预测模型为例(预测客户是否违约）为例来解释各个变量的含义：Pyi是第i个分箱中违约客户(即模型中目标变量"是否"违约取值为1的个体）
#占整个样本中所有违约客户的比例，Pni是第i个分箱中未违约客户(即模型中目标变量"是否"违约取值为0的个体）占整个样本中所有未违约客户的比例
#Yi是第i个分箱中违约客户的数量，Yt是整个样本中所有违约客户的数量，Ni是i个分箱中未违约客户的数量，Nt是整个样本中所有未违约客户的数量

#假设整个样本中共有10个违约客户(Yt）、10个未违约客户(Nt），然后根据特征变量年龄将整个样本分成4个分箱，其中第一个分箱里有2个违约客户、2个未违约客户
#因此Pyi=2/10=0.2 Pni=2/10=0.2,那么该分箱的WOE值为ln(0.2/0.2)=ln(1)=0  WOE=ln((Yi/Yt)/(Ni/Nt))=ln((Yi/Ni)/(Yt/Nt))

#变换以后，WOE值也可以理解为：分箱后第i个分箱中违约客户和未违约客户的比值与整个样本中该比值的差异。
#其中整个样本的违约客户和未违约客户的比值Yt/Nt是一个固定值，所以WOE值反映的就是分箱后第i个分箱中违约客户和未违约客户的比值Yi/Ni，这其实就反映来特征区分度

#将年龄这以特征分箱后，倘若第i个分箱中全部为违约客户且数量为10（此时该分箱的区分度就很高），那么Yi=10，Ni=0，因此Yi/Ni=+∞，又因为ln(+∞)=+∞,所以该分箱对应对WOE值为+∞
#倘若第i个分箱中全部为未违约客户且数量为10（此时该分箱的区分度就很高），那么Yi=0，Ni=10，因此Yi/Ni=-∞，因此Yi/Ni=-∞，又因为ln(+∞)=-∞,所以该分箱对应对WOE值为-∞
#倘若该分箱一点区分度也没有，即该分箱中违约客户和未违约客户对比值和整个样本对该比值一样，那么woe=ln(1)=0
#从上面对例子可以看到根据年龄这一特征变量分箱后，各个分箱对区分度很高，即能够较好地进行分类，从这个角度来说，woe值类似于决策树对基尼系数和信息增益

#比如说将"年龄"这一特征变量分成三个箱后，每个分箱WOE值对绝对值很大，就说明这一特征变量对特征区分度很高，能很好地区分违约与未违约客户，因此这类问题应该重点考虑"年龄"这一特征变量
#实际应用中，因为数据量通常较大，所以不太可能会出现WOE值为+∞和-∞的情况，如果出现来无穷大的WOE值，也是我们不希望看到的。
#这样会导致基于WOE值的IV值也变成无穷大，不利于进行特征筛选。此时处理方法又两种：第一种方法是对数据重新进行更合理的分箱，
#使各个分箱的WOE值不再无穷大，第二种方法是忽略这些无穷大的值，直接让它变为0，这一思路比较简单且易于实现


#IV值的定义与计算
#IV(信息量)，在进行特征筛选时，IV值能较好地反映特征变量的预测能力，特征变量对预测结果的贡献越大，其价值就越大，对应的IV值就越大，
#因此我们可根据IV值的大小筛选出需要的特征变量
#计算一个特征变量的IV值前，需要计算该变量各个分箱的IV值：IVi=（Pyi-Pni）*WOEi，最后对各个分箱对IV值进行简单求和，就得到这个特征变量对IV值


#一个特征变量对IV值越高，说明该特征变量越具有区分度，不过IV值也不是越大越好，如果一个特征变量对IV值大于0.5，有时需要对这个特征变量持有疑问，
#因为它有点过好而显得不够真实。通常会选择IV值在0.1-0.5这个范围内对特征变量。不同应用场景对取值也会有所不同，
#例如，有些风控团队会将IV值大于0.5的特征变量也纳入考量，这个其实也需要根据实际的建模效果来做进一步判断



import pandas as pd
data = pd.DataFrame([[22, 1], [25, 1], [20, 0], [35, 0], [32, 1], [38, 0], [50, 0], [46, 1]], columns=['年龄', '是否违约'])
data_cut = pd.cut(data['年龄'], 3)    #cut()函数进行等宽分箱，第一个参数待分箱等列，第二个参数是分箱个数
print(data_cut)
#统计总客户数
cut_group_all = data['是否违约'].groupby(data_cut).count()  #groupby()函数根据分箱内容进行归类，用count()函数进行计数，获得各个分箱中的总客户数
#统计违约客户数
cut_y = data['是否违约'].groupby(data_cut).sum()#用groupby()函数根据分箱内容进行归类，用sum()函数进行求和，因为违约客户的数字标识为1，而未违约客户的数字标识是0，所以sum()函数求和的结果就是未违约的客户数
#统计未违约客户数
cut_n = cut_group_all - cut_y  #用总客户数减去违约客户数得到未违约客户数
#h汇总数据
df = pd.DataFrame()
df['总样本'] = cut_group_all
df['好样本'] = cut_n
df['坏样本'] = cut_y
df['好样本%'] = df['好样本'] / df['好样本'].sum()  #计算好样本比率
df['坏样本%'] = df['坏样本'] / df['坏样本'].sum()  #计算坏样本比率
print(df)

#计算WOE值
import numpy as np
df['WOE'] = np.log(df['坏样本%'] / df['好样本%'])
print(df['WOE'])

#在实际应用中，我们不希望WEO值出现无穷大（这样会导致计算的IV值也变为无穷大，丧失来IV值的意义）
#但是有时可能由于数据特殊性及分箱的原因，还是出现来WOE值为无穷大的情况（某个分箱中只有一种类别的数据），此时的解决办法是将无穷大的WOE值替换为0
df = df.replace({'WOE': {np.inf: 0, -np.inf: 0}}) #replace()函数将无穷大替换为0，其中np.inf是利用numpy库构造的正无穷，-np.inf则是-负无穷

#计算IV值：IVi= (Pyi-Pni)*WOEi
df['IV'] = df['WOE'] * (df['坏样本%'] - df['好样本%'])
print(df)
#有来各个分箱的IV值后，就可以计算"年龄"这一特征变量的IV值
iv = df['IV'].sum()
print(iv)